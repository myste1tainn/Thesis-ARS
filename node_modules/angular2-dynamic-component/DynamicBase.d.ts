import { Compiler, OnChanges, OnDestroy, EventEmitter, ViewContainerRef, Type, SimpleChanges } from '@angular/core';
import { Http } from '@angular/http';
import { IComponentRemoteTemplateFactory } from './IComponentRemoteTemplateFactory';
import { DynamicCache } from './DynamicCache';
export interface ComponentContext {
    [index: string]: any;
}
export interface IDynamicComponent {
}
export interface DynamicComponentType {
    new (): IDynamicComponent;
}
export interface DynamicMetadata {
    selector: string;
    styles?: Array<string>;
    template?: string;
    templateUrl?: string;
}
export interface DynamicComponentConfig {
    template?: string;
    templatePath?: string;
}
export declare type AnyT = Type<any>;
export declare const DYNAMIC_TYPES: {
    DynamicExtraModules: string;
};
export declare class DynamicBase implements OnChanges, OnDestroy {
    protected dynamicExtraModules: Array<any>;
    protected viewContainer: ViewContainerRef;
    protected compiler: Compiler;
    protected http: Http;
    protected dynamicCache: DynamicCache;
    dynamicComponentReady: EventEmitter<IDynamicComponent>;
    dynamicComponentBeforeReady: EventEmitter<void>;
    componentType: DynamicComponentType;
    componentTemplate: string;
    componentStyles: string[];
    componentContext: ComponentContext;
    componentTemplateUrl: string;
    componentTemplatePath: string;
    componentDefaultTemplate: string;
    componentRemoteTemplateFactory: IComponentRemoteTemplateFactory;
    componentModules: Array<any>;
    private injector;
    private dynamicSelector;
    private cachedDynamicModule;
    private cachedDynamicComponent;
    private componentInstance;
    private moduleInstance;
    constructor(dynamicExtraModules: Array<any>, viewContainer: ViewContainerRef, compiler: Compiler, http: Http, dynamicCache: DynamicCache, dynamicSelector: string);
    /**
     * @override
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @override
     */
    ngOnDestroy(): void;
    /**
     * Build module wrapper for dynamic component asynchronously
     *
     * @returns {Promise<AnyT>}
     */
    protected buildModule(): Promise<AnyT>;
    protected loadRemoteTemplate(url: string, resolve: (value: AnyT) => void): void;
    protected makeComponentModule(dynamicConfig?: DynamicComponentConfig): AnyT;
    /**
     * Build dynamic component class
     *
     * @param componentConfig
     * @returns {Type<IDynamicComponent>}
     */
    protected makeComponent(componentConfig?: DynamicComponentConfig): Type<IDynamicComponent>;
    protected applyPropertiesToDynamicComponent(instance: IDynamicComponent): void;
}
