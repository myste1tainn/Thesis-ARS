"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var index_1 = require("ts-metadata-helper/index");
var uniqueId = 0;
var Utils = (function () {
    function Utils() {
    }
    Utils.nextId = function () {
        return uniqueId++;
    };
    Utils.buildByNextId = function (value) {
        return value.replace('{id}', String(this.nextId()));
    };
    Utils.isPresent = function (obj) {
        return obj !== undefined && obj !== null;
    };
    Utils.isUndefined = function (obj) {
        return obj === undefined;
    };
    Utils.isString = function (obj) {
        return typeof obj === 'string';
    };
    Utils.isFunction = function (obj) {
        return typeof obj === 'function';
    };
    Utils.isArray = function (obj) {
        return Array.isArray(obj);
    };
    Utils.findComponentDecoratorByComponentType = function (componentType) {
        if (Utils.isPresent(componentType)) {
            var annotationsArray = index_1.MetadataHelper.findAnnotationsMetaData(componentType, core_1.Component);
            if (annotationsArray.length) {
                return annotationsArray[0];
            }
        }
        return null;
    };
    Utils.isSelectorOfComponentTypeEqual = function (selector, componentType) {
        var componentDecorator = Utils.findComponentDecoratorByComponentType(componentType);
        var currentSelector = null;
        return this.isPresent(componentDecorator)
            && this.isPresent(currentSelector = this.extractSelector(componentDecorator))
            && selector === currentSelector;
    };
    Utils.extractSelector = function (object) {
        return Reflect.get(object, 'selector');
    };
    Utils.getParamTypes = function (object) {
        return Reflect.getMetadata("design:paramtypes", object);
    };
    Utils.isSelectorPresent = function (object) {
        return Utils.isPresent(this.extractSelector(object));
    };
    /**
     * Calculate a 32 bit FNV-1a hash
     * Found here: https://gist.github.com/vaiorabbit/5657561
     * Ref.: http://isthe.com/chongo/tech/comp/fnv/
     *
     * @param {string} str the input value
     * @param {boolean} [asString=false] set to true to return the hash value as
     *     8-digit hex string instead of an integer
     * @param {number} [seed] optionally pass the hash of the previous chunk
     * @returns {string|number}
     */
    Utils.hashFnv32a = function (str, asString, seed) {
        /*jshint bitwise:false */
        var i, l, hval = (seed === undefined) ? 0x811c9dc5 : seed;
        for (i = 0, l = str.length; i < l; i++) {
            hval ^= str.charCodeAt(i);
            hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
        }
        if (asString) {
            // Convert to 8 digit hex string
            return ("0000000" + (hval >>> 0).toString(16)).substr(-8);
        }
        return hval >>> 0;
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=Utils.js.map