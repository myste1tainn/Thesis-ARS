"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var index_1 = require("ts-metadata-helper/index");
var Utils_1 = require("./Utils");
exports.DYNAMIC_TYPES = {
    DynamicExtraModules: 'DynamicExtraModules' // AoT workaround Symbol(..)
};
var HASH_FIELD = '__hashValue';
var DynamicBase = (function () {
    function DynamicBase(dynamicExtraModules, viewContainer, compiler, http, dynamicCache, dynamicSelector) {
        this.dynamicExtraModules = dynamicExtraModules;
        this.viewContainer = viewContainer;
        this.compiler = compiler;
        this.http = http;
        this.dynamicCache = dynamicCache;
        this.dynamicComponentReady = new core_1.EventEmitter(false);
        this.dynamicComponentBeforeReady = new core_1.EventEmitter(false);
        this.dynamicSelector = Utils_1.Utils.buildByNextId(dynamicSelector);
        this.injector = core_1.ReflectiveInjector.fromResolvedProviders([], this.viewContainer.parentInjector);
    }
    /**
     * @override
     */
    DynamicBase.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.ngOnDestroy();
        this.dynamicComponentBeforeReady.emit(null);
        // TODO investigate memory leak in the specific case
        this.buildModule().then(function (module) {
            var compiledModule;
            var currentModuleHash = Reflect.get(module, HASH_FIELD);
            if (Utils_1.Utils.isPresent(currentModuleHash)) {
                compiledModule = _this.dynamicCache.get(currentModuleHash);
                if (!Utils_1.Utils.isPresent(compiledModule)) {
                    _this.dynamicCache.set(currentModuleHash, compiledModule = _this.compiler.compileModuleAndAllComponentsAsync(module));
                }
            }
            else {
                compiledModule = _this.compiler.compileModuleAndAllComponentsAsync(module);
            }
            compiledModule
                .then(function (moduleWithComponentFactories) {
                _this.moduleInstance = moduleWithComponentFactories.ngModuleFactory.create(_this.injector);
                var factory = moduleWithComponentFactories.componentFactories.find(function (componentFactory) {
                    return Utils_1.Utils.isSelectorOfComponentTypeEqual(componentFactory.selector, _this.componentType)
                        || componentFactory.selector === _this.dynamicSelector
                        || (Utils_1.Utils.isPresent(componentFactory.componentType) && Utils_1.Utils.isPresent(_this.componentTemplate)
                            && Reflect.get(componentFactory.componentType, HASH_FIELD) === Utils_1.Utils.hashFnv32a(_this.componentTemplate, true));
                });
                var componentInstance = _this.componentInstance = factory.create(_this.injector, null, null, _this.moduleInstance);
                _this.viewContainer.insert(componentInstance.hostView, 0);
                _this.applyPropertiesToDynamicComponent(_this.componentInstance.instance);
                _this.dynamicComponentReady.emit(_this.componentInstance.instance);
            });
        });
    };
    /**
     * @override
     */
    DynamicBase.prototype.ngOnDestroy = function () {
        if (Utils_1.Utils.isPresent(this.moduleInstance)) {
            this.moduleInstance.destroy();
            this.moduleInstance = null;
        }
        if (Utils_1.Utils.isPresent(this.componentInstance)) {
            this.componentInstance.destroy();
            this.componentInstance = null;
        }
        if (Utils_1.Utils.isPresent(this.cachedDynamicModule)) {
            this.compiler.clearCacheFor(this.cachedDynamicModule);
            this.cachedDynamicModule = null;
        }
        if (Utils_1.Utils.isPresent(this.cachedDynamicComponent)) {
            this.compiler.clearCacheFor(this.cachedDynamicComponent);
            this.cachedDynamicComponent = null;
        }
    };
    /**
     * Build module wrapper for dynamic component asynchronously
     *
     * @returns {Promise<AnyT>}
     */
    DynamicBase.prototype.buildModule = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (Utils_1.Utils.isPresent(_this.componentTemplate)) {
                resolve(_this.makeComponentModule({ template: _this.componentTemplate }));
            }
            else if (Utils_1.Utils.isPresent(_this.componentTemplatePath)) {
                resolve(_this.makeComponentModule({ templatePath: _this.componentTemplatePath }));
            }
            else if (Utils_1.Utils.isPresent(_this.componentTemplateUrl)) {
                _this.loadRemoteTemplate(_this.componentTemplateUrl, resolve);
            }
            else {
                resolve(_this.makeComponentModule());
            }
        });
    };
    DynamicBase.prototype.loadRemoteTemplate = function (url, resolve) {
        var _this = this;
        var requestArgs = { withCredentials: true };
        if (Utils_1.Utils.isPresent(this.componentRemoteTemplateFactory)) {
            requestArgs = this.componentRemoteTemplateFactory.buildRequestOptions();
        }
        this.http.get(url, requestArgs)
            .subscribe(function (response) {
            // TODO Inject response statuses
            if ([301, 302, 307, 308].indexOf(response.status) > -1) {
                var chainedUrl = response.headers.get('Location');
                // TODO Inject logger
                console.debug('[$DynamicBase][loadRemoteTemplate] The URL into the chain is:', chainedUrl);
                if (Utils_1.Utils.isPresent(chainedUrl)) {
                    _this.loadRemoteTemplate(chainedUrl, resolve);
                }
                else {
                    console.warn('[$DynamicBase][loadRemoteTemplate] The URL into the chain is empty. The process of redirect has stopped.');
                }
            }
            else {
                var loadedTemplate = Utils_1.Utils.isPresent(_this.componentRemoteTemplateFactory)
                    ? _this.componentRemoteTemplateFactory.parseResponse(response)
                    : response.text();
                resolve(_this.makeComponentModule({ template: loadedTemplate }));
            }
        }, function (response) {
            console.warn('[$DynamicBase][loadRemoteTemplate] Error response:', response);
            var template = _this.componentDefaultTemplate || '';
            resolve(_this.makeComponentModule({ template: template }));
        });
    };
    DynamicBase.prototype.makeComponentModule = function (dynamicConfig) {
        var dynamicComponentType = this.cachedDynamicComponent
            = this.makeComponent(dynamicConfig);
        var componentModules = this.dynamicExtraModules.concat(this.componentModules || []);
        var dynamicComponentModule = (function () {
            function dynamicComponentModule() {
            }
            return dynamicComponentModule;
        }());
        dynamicComponentModule.decorators = [
            { type: core_1.NgModule, args: [{
                        declarations: [dynamicComponentType],
                        imports: [common_1.CommonModule].concat(componentModules)
                    },] },
        ];
        /** @nocollapse */
        dynamicComponentModule.ctorParameters = function () { return []; };
        var dynamicComponentTypeHash = Reflect.get(dynamicComponentType, HASH_FIELD);
        if (Utils_1.Utils.isPresent(dynamicComponentTypeHash)) {
            Reflect.set(dynamicComponentModule, HASH_FIELD, dynamicComponentTypeHash);
        }
        return this.cachedDynamicModule = dynamicComponentModule;
    };
    /**
     * Build dynamic component class
     *
     * @param componentConfig
     * @returns {Type<IDynamicComponent>}
     */
    DynamicBase.prototype.makeComponent = function (componentConfig) {
        var internalInjector = this.injector;
        var componentDecorator = Utils_1.Utils.findComponentDecoratorByComponentType(this.componentType);
        var componentTypeParameters = Utils_1.Utils.isPresent(this.componentType)
            ? (Utils_1.Utils.getParamTypes(this.componentType) || [])
            : [];
        var componentMetadata;
        if (Utils_1.Utils.isPresent(componentDecorator)) {
            if (!Utils_1.Utils.isSelectorPresent(componentDecorator)) {
                // Setting selector if it is not present in Component metadata
                Reflect.set(componentDecorator, 'selector', this.componentType.name);
            }
        }
        else {
            componentMetadata = {
                selector: this.dynamicSelector,
                styles: this.componentStyles
            };
            if (Utils_1.Utils.isPresent(componentConfig)) {
                if (Utils_1.Utils.isPresent(componentConfig.template)) {
                    componentMetadata.template = componentConfig.template;
                }
                else if (Utils_1.Utils.isPresent(componentConfig.templatePath)) {
                    componentMetadata.templateUrl = componentConfig.templatePath;
                }
            }
        }
        var dynamicClassMetadata = componentDecorator || componentMetadata;
        var componentParentClass = (this.componentType || (function () {
            function class_1() {
            }
            return class_1;
        }()));
        var dynamicComponentClass = (function (_super) {
            __extends(dynamicComponentClass, _super);
            function dynamicComponentClass(elementRef) {
                return _super.apply(this, componentTypeParameters
                    .map(function (service) {
                    return elementRef instanceof service
                        ? elementRef
                        : internalInjector.get(service);
                })
                    .concat([elementRef])) || this;
            }
            return dynamicComponentClass;
        }(componentParentClass));
        dynamicComponentClass.decorators = [
            { type: core_1.Component, args: [dynamicClassMetadata,] },
        ];
        /** @nocollapse */
        dynamicComponentClass.ctorParameters = function () { return [
            { type: core_1.ElementRef, decorators: [{ type: core_1.Inject, args: [core_1.ElementRef,] },] },
        ]; };
        if (Utils_1.Utils.isPresent(Reflect.get(dynamicClassMetadata, 'template'))) {
            Reflect.set(dynamicComponentClass, HASH_FIELD, Utils_1.Utils.hashFnv32a(Reflect.get(dynamicClassMetadata, 'template'), true));
        }
        return dynamicComponentClass;
    };
    DynamicBase.prototype.applyPropertiesToDynamicComponent = function (instance) {
        var _this = this;
        var metadataHolder = index_1.MetadataHelper.findPropertyMetadata(this, core_1.Input);
        for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {
            var property = _a[_i];
            if (Reflect.has(metadataHolder, property)) {
                if (Reflect.has(instance, property)) {
                    console.warn('[$DynamicBase][applyPropertiesToDynamicComponent] The property', property, 'will be overwritten for the component', instance);
                }
                Reflect.set(instance, property, Reflect.get(this, property));
            }
        }
        if (Utils_1.Utils.isPresent(this.componentContext)) {
            var _loop_1 = function (property) {
                if (Reflect.has(instance, property)) {
                    console.warn('[$DynamicBase][applyPropertiesToDynamicComponent] The property', property, 'will be overwritten for the component', instance);
                }
                var propValue = Reflect.get(this_1.componentContext, property);
                var attributes = {};
                if (!Utils_1.Utils.isFunction(propValue)) {
                    attributes.set = function (v) { return Reflect.set(_this.componentContext, property, v); };
                }
                attributes.get = function () { return Reflect.get(_this.componentContext, property); };
                Reflect.defineProperty(instance, property, attributes);
            };
            var this_1 = this;
            for (var property in this.componentContext) {
                _loop_1(property);
            }
        }
    };
    return DynamicBase;
}());
DynamicBase.propDecorators = {
    'dynamicComponentReady': [{ type: core_1.Output },],
    'dynamicComponentBeforeReady': [{ type: core_1.Output },],
    'componentType': [{ type: core_1.Input },],
    'componentTemplate': [{ type: core_1.Input },],
    'componentStyles': [{ type: core_1.Input },],
    'componentContext': [{ type: core_1.Input },],
    'componentTemplateUrl': [{ type: core_1.Input },],
    'componentTemplatePath': [{ type: core_1.Input },],
    'componentDefaultTemplate': [{ type: core_1.Input },],
    'componentRemoteTemplateFactory': [{ type: core_1.Input },],
    'componentModules': [{ type: core_1.Input },],
};
exports.DynamicBase = DynamicBase;
//# sourceMappingURL=DynamicBase.js.map